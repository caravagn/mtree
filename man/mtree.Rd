% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mtree.R
\name{mtree}
\alias{mtree}
\title{Construct a `mtree` mutation tree with known structure.}
\usage{
mtree(binary_clusters, drivers, samples, patient, M, score,
  annotation = paste0("Mutation tree for patient ", patient))
}
\arguments{
\item{drivers}{A list of driver events that should be annotated to each one
of the input clusters contained in the `CCF_clusters` parameter. See the package 
vignette to see the format in which this should be specified.}

\item{samples}{A vector of samples names (e.g., the biopsies sequenced for
this patient).}

\item{patient}{A string id that represent this patient.}

\item{M}{The adjacency matrix defined to connect all the nodes of this tree.}

\item{score}{A scalar score that can be associated to this tree.}

\item{annotation}{Any string annotation that one wants to add to this `ctree`.
This will be used by some of the plotting functions that display `ctree` objects.}

\item{CCF_clusters}{Clusters of Cancer Cell Fractions available in the data of
this patient. See the package vignette to see the format in which this should
be specified.}
}
\value{
An object of class \code{"ctree"} that represents this tree.
}
\description{
This constructor creates an object of class `'ctree'`, which represents a mutation tree. 
The tree is created from a set of binary clusters computed for a patient, here a cluster
is defined as the set of alterations (e.g., mutations) that are detected as present or
absent in the same set of sequenced biopsies.

To create a tree a list of drivers can be provided to be annotated to an input 
set of binary clusters. There are a minimum amount of information and formatting
fields that are required for tree construction to operate successfully. Please
refer to the package vignette and the provided input datasets for more instructions.
}
\examples{
data('ctree_input')

x = ctrees(
   ctree_input$CCF_clusters,
   ctree_input$drivers,
   ctree_input$samples,
   ctree_input$patient,
   ctree_input$sspace.cutoff,
   ctree_input$n.sampling,
   ctree_input$store.max
   )
x = x[[1]]    
   
   
# Adj matrix inside of the objects, we remove the GL
# entry that is added as fake root by ctree
M = x$adj_mat
M = M[rownames(M) != 'GL', colnames(M) != 'GL']

print(M)

# Manual construction
y = ctree(
   ctree_input$CCF_clusters,
   ctree_input$drivers,
   ctree_input$samples,
   ctree_input$patient,
   M,
   score = 123456,
   annotation = paste0("Some clone tree")
)

# The same
print(x)
print(y)
}
\seealso{
This function requires the input tree to be specified in the
format of an adjacency matrix; plese see function \code{\link{mtrees}} if you
need to create de novo also the adjacency matrices that fit your data.
}
